// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package queries

import (
	"context"

	"github.com/gofrs/uuid"
)

const createTodo = `-- name: CreateTodo :exec
INSERT INTO app.todos (title) VALUES ($1)
`

func (q *Queries) CreateTodo(ctx context.Context, title string) error {
	_, err := q.db.Exec(ctx, createTodo, title)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM app.todos WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTodo, id)
	return err
}

const fetchTodo = `-- name: FetchTodo :one
SELECT id, title FROM app.todos WHERE id = $1
`

func (q *Queries) FetchTodo(ctx context.Context, id uuid.UUID) (AppTodo, error) {
	row := q.db.QueryRow(ctx, fetchTodo, id)
	var i AppTodo
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, title FROM app.todos LIMIT $1 OFFSET $2
`

type ListTodosParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListTodos(ctx context.Context, arg ListTodosParams) ([]AppTodo, error) {
	rows, err := q.db.Query(ctx, listTodos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppTodo
	for rows.Next() {
		var i AppTodo
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE app.todos SET title = $1 WHERE id = $2
`

type UpdateTodoParams struct {
	Title string
	ID    uuid.UUID
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.Exec(ctx, updateTodo, arg.Title, arg.ID)
	return err
}
